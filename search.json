[{"title":"Springboot项目同时支持http和https访问","url":"/2020/09/15/Springboot项目同时支持http和https访问/","content":"\n因公司业务需求，需要项目同时支持http和https访问，在此记录如何实现\n项目采用springboot 2.x搭建，实现与springboot 1.x略有不同，使用springboot 2.x的可以参考实现\n<!-- more -->\n\n## 实现步骤：\n#### 1. 首先项目为sprintboot 2.x搭建，并引入web模块\n#### 2. 将https需要的证书放入项目中\n##### 2.1 证书来源\n- 如果公司提供，则直接使用公司提供的证书\n- 如果公司没有提供，也可自己使用Java自带的命令keytool来生成\n\t- windows下cmd打开命令黑窗口，输入以下命令（直接复制即可）\n\t```\n\tkeytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650\n\t```\n\t- 按照提示输入生成证书所需信息，就会在系统的当前用户目录下生成一个keystore.p12文件（如果你修改了证书文件的名称那就是你修改的名字）\n\t- 简单的参数说明：\n\t```\n\t1. -storetype 指定密钥仓库类型 \n\t2. -keyalg 生证书的算法名称，RSA是一种非对称加密算法 \n\t3. -keysize 证书大小 \n\t4. -keystore 生成的证书文件的存储路径 \n\t5. -validity 证书的有效期\n\t```\n\n##### 2.2 证书放置位置\n- 证书可以放在项目的根目录下，即和pom文件同级的目录\n- 证书也可放置在```src/main/resources```目录下\n- 两者放置位置不同配置时证书路径写法稍有不同，下文会具体说明\n\n#### 3. 在配置文件中配置支持https所需信息\n```properties\n# 支持https访问\n# https访问的端口号\nserver.port=8443\n# 证书的路径，根据证书放置位置不同，写法不同\n# 如果证书放在根目录下，此处只需要写证书的名字即可，但项目打包部署时提示证书找不到，故建议放在resources文件夹下\n# 如果证书放在 src/main/resources 下，则需写 classpath:keystore/server.keystore\nserver.ssl.key-store=classpath:keystore/server.keystore\n# 证书的签名密码，如果是自己生成的证书在输入信息时会有输入\nserver.ssl.key-store-password=slipper\n# 证书类型，常见的两种证书类型有：PKCS12和JKS，这里需要注意证书类型不能写错了，否则项目启动时会报错\nserver.ssl.keyStoreType=JKS\n```\n- 按照如上配置即可通过配置的8443端口实现https访问了\n- 例如：https://127.0.0.1:8443/...\n\n#### 4. 添加Java配置类使项目同时支持http访问\n- 因一个项目只能配置一个 ```server.port```，所以要支持http访问需要用Java代码实现\n\n4.1 配置文件中添加http端口配置\n```properties\nhttp.port=8060\n```\n4.2 书写Java配置类\n- 此处需要注意很多博客中提到的```EmbeddedServletContainerFactory```相关类，在springboot 2.x版本中已经被弃用，需要使用```WebServerFactoryCustomizer<ConfigurableWebServerFactory>```这种写法\n```java\n/**\n * \n * @function   http访问配置类\n *\n */\n@Configuration\npublic class TomcatConfig {\n    \n    @Value(\"${http.port}\")\n    private int httpPort;\n\n    @Bean\n    public WebServerFactoryCustomizer<ConfigurableWebServerFactory> webServerFactoryCustomizer() {\n        return new WebServerFactoryCustomizer<ConfigurableWebServerFactory>() {\n\n            @Override\n            public void customize(ConfigurableWebServerFactory factory) {\n                if (factory instanceof TomcatServletWebServerFactory) {\n                    TomcatServletWebServerFactory webServerFactory = (TomcatServletWebServerFactory)factory;\n                    Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);\n                    // 设置http访问的端口号，不能与https端口重复，否则会报端口被占用的错误\n                    connector.setPort(httpPort);\n                    webServerFactory.addAdditionalTomcatConnectors(connector);\n                }\n            }\n        };\n    }\n      \n}\n```\n- 此时就可以使用8060端口http访问了\n- 例如：http://127.0.0.1:8060/...\n\n> 至此项目就实现了既能支持https访问，又能支持http访问\n\n> 如果转载请注明出处，谢谢\n\n- 参考资料：\n[springboot官方demo](https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java)","tags":["Java","Springboot"],"categories":["Java","Springboot","技术日常"]}]