[{"title":"SpringBoot 2.x 一个项目中使用RedisTemplate操作多个Redis库","url":"/2020/09/15/SpringBoot-2-x-一个项目中使用RedisTemplate操作多个Redis库/","content":"\n背景：我们都知道Redis有16个数据库可以使用，在项目中需要用到redis的多个库，每次使用时再去通过一堆代码切换未免觉得太过麻烦，所以直接通过配置注入多个RedisTemplate，需要用到哪个库时直接使用对应的RedisTemplate即可\n<!-- more -->\n\n#### 首先是配置文件\n**在application.properties中添加redis的相关配置**\n\n```java\n#redis多数据配置\nredis.database.test1=1\nredis.database.test2=2\nredis.host=127.0.0.1\nredis.port=6379\nredis.password=root\n##连接超时，此处使用单位秒\nredis.timeout=180\n##连接池配置\nredis.pool.max-active=8\nredis.pool.max-idle=8\nredis.pool.min-idle=0\nredis.pool.max-wait=-1\n```\n- 数据库的选择可根据业务需求配置多个，此处测试只配置了两个。\n- 连接池的配置都是使用的默认值，如有其他需求可自行更改\n\n#### 然后通过配置类注入RedisTemplate\n- 先看代码\n```java\nimport org.apache.commons.pool2.impl.GenericObjectPoolConfig;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.redis.connection.RedisPassword;\nimport org.springframework.data.redis.connection.RedisStandaloneConfiguration;\nimport org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;\nimport org.springframework.data.redis.connection.lettuce.LettucePoolingClientConfiguration;\nimport org.springframework.data.redis.core.StringRedisTemplate;\n\nimport java.time.Duration;\n\n/**\n * @date 2020/1/21\n */\n@Configuration\npublic class RedisConfiguration {\n\n    @Value(\"${redis.database.test1}\")\n    private int test1Database;\n\n    @Value(\"${redis.database.test2}\")\n    private int test2Database;\n\n    @Value(\"${redis.host}\")\n    private String host;\n\n    @Value(\"${redis.port}\")\n    private int port;\n\n    @Value(\"${redis.password}\")\n    private String password;\n\n    @Value(\"${redis.timeout}\")\n    private int timeout;\n\n    @Value(\"${redis.pool.max-active}\")\n    private int maxActive;\n\n    @Value(\"${redis.pool.max-idle}\")\n    private int maxIdle;\n\n    @Value(\"${redis.pool.min-idle}\")\n    private int minIdle;\n\n    @Value(\"${redis.pool.max-wait}\")\n    private int maxWait;\n\n    @Bean\n    public GenericObjectPoolConfig getPoolConfig(){\n        // 配置redis连接池\n        GenericObjectPoolConfig poolConfig = new GenericObjectPoolConfig();\n        poolConfig.setMaxTotal(maxActive);\n        poolConfig.setMaxIdle(maxIdle);\n        poolConfig.setMinIdle(minIdle);\n        poolConfig.setMaxWaitMillis(maxWait);\n        return poolConfig;\n    }\n\n    @Bean(name = \"test1RedisTemplate\")\n    public StringRedisTemplate getTest1RedisTemplate(){\n        return getStringRedisTemplate(test1Database);\n    }\n\n    @Bean(name = \"test2RedisTemplate\")\n    public StringRedisTemplate getTest2RedisTemplate(){\n        // 构建工厂对象\n        return getStringRedisTemplate(test2Database);\n    }\n\n    private StringRedisTemplate getStringRedisTemplate(int database) {\n        // 构建工厂对象\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n        configuration.setHostName(host);\n        configuration.setPort(port);\n        configuration.setPassword(RedisPassword.of(password));\n        LettucePoolingClientConfiguration clientConfiguration = LettucePoolingClientConfiguration.builder()\n                .commandTimeout(Duration.ofSeconds(timeout)).poolConfig(getPoolConfig()).build();\n        LettuceConnectionFactory factory = new LettuceConnectionFactory(configuration, clientConfiguration);\n        // 设置使用的redis数据库\n        factory.setDatabase(database);\n        // 重新初始化工厂\n        factory.afterPropertiesSet();\n        return new StringRedisTemplate(factory);\n    }\n\n}\n```\n###### 解释几个地方：\n1. SpringBoot 2.x 之后连接redis驱动默认使用的是**lettuce**，而非之前的**jedis**，这里简要说一下两个驱动的区别：\n- jedis采用的是直连redis server，在多个线程之间共用一个jedis实例时，是线程不安全的。如果想避免线程不安全，可以使用连接池pool，这样每个线程单独使用一个jedis实例。由此带来的问题是，如果线程数过多，带来redis server的负载加大。有点类似于BIO的模式。\n\n- lettuce采用netty连接redis server，实例可以在多个线程间共享，不存在线程不安全的情况，这样可以减少线程数量。在特殊情况下，lettuce也可以使用多个实例。有点类似于NIO的模式\n\n2. 翻看源码**lettuce**驱动的连接池是依赖于apache的commons-pool2中的GenericObjectPoolConfig对象实现的，而SpringBoot对Redis的Starter中未引入该依赖\n```java\n<dependency>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-data-redis</artifactId>\n</dependency>\n```\n所以如果要配置连接池并且项目中未通过其他组件引入commons-pool2依赖时需要手动引入该依赖\n```java\n<dependency>\n    <groupId>org.apache.commons</groupId>\n    <artifactId>commons-pool2</artifactId>\n    <version>2.8.0</version>\n</dependency>\n```\n#### 最后是测试环节\n- 直接使用SpringBoot的Junit测试，分别使用两个RedisTemplate操作Redis\n```java\n@SpringBootTest\nclass RedisdemoApplicationTests {\n\n    @Resource(name = \"test1RedisTemplate\")\n    private StringRedisTemplate test1RedisTemplate;\n\n    @Resource(name = \"test2RedisTemplate\")\n    private StringRedisTemplate test2RedisTemplate;\n\n    @Test\n    public void testRedisTemplate() {\n        // 测试用两个模板向redis中存值\n        test1RedisTemplate.opsForValue().set(\"name\", \"kong\");\n        test2RedisTemplate.opsForValue().set(\"age\", \"20\");\n    }\n\n}\n```\n- 查看Redis库看是否操作成功\n![在这里插入图片描述](https://img-blog.csdnimg.cn/20200122172854752.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjIzMzUwMA==,size_16,color_FFFFFF,t_70)\n- 可以看到Redis两个库中均已存入相应的值，说明RedisTemplate生效\n\n> 至此项目中就实现了可以使用多个Redis库的操作\n","tags":["Java","Springboot"],"categories":["Java","Springboot","技术日常"]},{"title":"Springboot项目同时支持http和https访问","url":"/2020/09/15/Springboot项目同时支持http和https访问/","content":"\n因公司业务需求，需要项目同时支持http和https访问，在此记录如何实现\n项目采用springboot 2.x搭建，实现与springboot 1.x略有不同，使用springboot 2.x的可以参考实现\n<!-- more -->\n\n## 实现步骤：\n#### 1. 首先项目为sprintboot 2.x搭建，并引入web模块\n#### 2. 将https需要的证书放入项目中\n##### 2.1 证书来源\n- 如果公司提供，则直接使用公司提供的证书\n- 如果公司没有提供，也可自己使用Java自带的命令keytool来生成\n\t- windows下cmd打开命令黑窗口，输入以下命令（直接复制即可）\n\t```\n\tkeytool -genkey -alias tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650\n\t```\n\t- 按照提示输入生成证书所需信息，就会在系统的当前用户目录下生成一个keystore.p12文件（如果你修改了证书文件的名称那就是你修改的名字）\n\t- 简单的参数说明：\n\t```\n\t1. -storetype 指定密钥仓库类型 \n\t2. -keyalg 生证书的算法名称，RSA是一种非对称加密算法 \n\t3. -keysize 证书大小 \n\t4. -keystore 生成的证书文件的存储路径 \n\t5. -validity 证书的有效期\n\t```\n\n##### 2.2 证书放置位置\n- 证书可以放在项目的根目录下，即和pom文件同级的目录\n- 证书也可放置在```src/main/resources```目录下\n- 两者放置位置不同配置时证书路径写法稍有不同，下文会具体说明\n\n#### 3. 在配置文件中配置支持https所需信息\n```properties\n# 支持https访问\n# https访问的端口号\nserver.port=8443\n# 证书的路径，根据证书放置位置不同，写法不同\n# 如果证书放在根目录下，此处只需要写证书的名字即可，但项目打包部署时提示证书找不到，故建议放在resources文件夹下\n# 如果证书放在 src/main/resources 下，则需写 classpath:keystore/server.keystore\nserver.ssl.key-store=classpath:keystore/server.keystore\n# 证书的签名密码，如果是自己生成的证书在输入信息时会有输入\nserver.ssl.key-store-password=slipper\n# 证书类型，常见的两种证书类型有：PKCS12和JKS，这里需要注意证书类型不能写错了，否则项目启动时会报错\nserver.ssl.keyStoreType=JKS\n```\n- 按照如上配置即可通过配置的8443端口实现https访问了\n- 例如：https://127.0.0.1:8443/...\n\n#### 4. 添加Java配置类使项目同时支持http访问\n- 因一个项目只能配置一个 ```server.port```，所以要支持http访问需要用Java代码实现\n\n4.1 配置文件中添加http端口配置\n```properties\nhttp.port=8060\n```\n4.2 书写Java配置类\n- 此处需要注意很多博客中提到的```EmbeddedServletContainerFactory```相关类，在springboot 2.x版本中已经被弃用，需要使用```WebServerFactoryCustomizer<ConfigurableWebServerFactory>```这种写法\n```java\n/**\n * \n * @function   http访问配置类\n *\n */\n@Configuration\npublic class TomcatConfig {\n    \n    @Value(\"${http.port}\")\n    private int httpPort;\n\n    @Bean\n    public WebServerFactoryCustomizer<ConfigurableWebServerFactory> webServerFactoryCustomizer() {\n        return new WebServerFactoryCustomizer<ConfigurableWebServerFactory>() {\n\n            @Override\n            public void customize(ConfigurableWebServerFactory factory) {\n                if (factory instanceof TomcatServletWebServerFactory) {\n                    TomcatServletWebServerFactory webServerFactory = (TomcatServletWebServerFactory)factory;\n                    Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);\n                    // 设置http访问的端口号，不能与https端口重复，否则会报端口被占用的错误\n                    connector.setPort(httpPort);\n                    webServerFactory.addAdditionalTomcatConnectors(connector);\n                }\n            }\n        };\n    }\n      \n}\n```\n- 此时就可以使用8060端口http访问了\n- 例如：http://127.0.0.1:8060/...\n\n> 至此项目就实现了既能支持https访问，又能支持http访问\n\n- 参考资料：\n[springboot官方demo](https://github.com/spring-projects/spring-boot/blob/v2.0.0.RELEASE/spring-boot-samples/spring-boot-sample-tomcat-multi-connectors/src/main/java/sample/tomcat/multiconnector/SampleTomcatTwoConnectorsApplication.java)","tags":["Java","Springboot"],"categories":["Java","Springboot","技术日常"]}]